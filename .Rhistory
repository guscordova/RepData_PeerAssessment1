install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("R Programming")
x <- 1:10
if(x > 5) {
x <- 0
}
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
}
return(g)
?rbind
x <- list(1,2,3)
y <- list(5,5)
y <- rbind(x)
set.seed(1)
rpois(5, 2)
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?rbinom
plot(y)
?qpois
install.packages("RCassandra")
library(RCassandra)
localhost <- "127.0.0.1"
defaultport <- "9160"
conn <- RC.connect(host = localhost, port = defaultport)
#Cassandra connection library
install.packages("RCassandra")
library(RCassandra)
install.packages("RCassandra")
?RC.get
defaultport <- "9160"
conn <- RC.connect(host = localhost, port = defaultport)
RC.use(conn, "bdd")
#Cassandra connection library
install.packages("RCassandra")
library(RCassandra)
#Cassandra connection library
install.packages("RCassandra")
library(RCassandra)
install.packages("RCassandra")
#Cassandra connection library
install.packages("RCassandra", repos="http://cran.r-project.org")
library(RCassandra)
#Connect to Cassandra
localhost <- "127.0.0.1"
defaultport <- "9160"
conn <- RC.connect(host = localhost, port = defaultport)
RC.use(conn, "bdd")
?RC.get
cnames <- c("id", "hashtag", "createdAt")
RC.get(conn, "tweet", "", cnames)
library(lubridate)
?as.Date
?as.Date("Thu Nov 20 21:08:53 +0000 2014")
as.Date("Thu Nov 20 21:08:53 +0000 2014")
?lubridate
parse_date_time("Thu Nov 20 21:08:53 +0000 2014")
strptime("Thu Nov 20 21:08:53 +0000 2014")
strptime("Thu Nov 20 21:08:53 +0000 2014", "%a %b %d %H:%M:%S %z %Y")
setwd("~/Developer/R workspace/reproducibleresearch/RepData_PeerAssessment1")
?as.Date
na.omit
?na.omit
?aggregate
steps ~ date
#load the data
unzip("activity.zip")
data <- read.csv("activity.csv")
#transform
data$date <- as.Date(df$date, %Y-%m-%d)
#For this part of the assignment, you can ignore the missing values in the dataset.
clean.data <- na.omit(data)
#Make a histogram of the total number of steps taken each day
steps <- aggregate(steps ~ date, data=clean.data, FUN=sum)
hist(steps, labels = TRUE)
head(steps)
plot(steps)
hist(steps)
?hist
hist(steps$steps)
steps
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")
library(ggplot2)
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")
ggplot(steps, aes(x=steps)))
?hist
hist(steps$steps)
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2500, fill="gray")
ggplot(steps, aes(x=steps)) +
geom_histogram(colour="black", fill="white")
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2000, colour="black", fill="white")
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=1500, colour="black", fill="white")
?bimwith
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=1500, colour="black", fill="white")
ggplot(steps, aes(x=steps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")
?hist
hist(steps, labels = TRUE, main="Histogram of Steps per day")
hist(steps$steps, labels = TRUE, main="Histogram of Steps per day")
hist(steps$steps, labels = TRUE, color="gray" main="Histogram of Steps per day")
hist(steps$steps, labels = TRUE, color="gray", main="Histogram of Steps per day")
hist(steps$steps, labels = TRUE, col="gray", main="Histogram of Steps per day")
hist(steps$steps, labels = TRUE, color="gray", main="Histogram of Steps per day", xlab="Steps")
hist(steps$steps, labels = TRUE, col="gray", main="Histogram of Steps per day", xlab="Steps")
alculate and report the mean and median total number of steps taken per day
mean(steps$steps)
median(steps$steps)
unzip("activity.zip")
data <- read.csv("activity.csv")
?aggregate
steps_interval <- aggregate(steps ~ interval, data=clean.data, FUN=mean)
?lines
lines(steps_interval$interval, steps_interval$steps)
lines(steps_interval$interval, steps_interval$steps)
data$date <- as.Date(df$date, %Y-%m-%d)
data$date <- as.Date(df$date, '%Y-%m-%d')
?as.date
?date
data$date <- as.Date(df$date, "%Y-%m-%d")
data$date <- as.Date(data$date, "%Y-%m-%d")
data$date <- as.Date(data$date, "%Y-%m-%d")
data$date <- as.Date(data$date, "%Y-%m-%d")
unzip("activity.zip")
data <- read.csv("activity.csv")
#transform
data$date <- as.Date(data$date, "%Y-%m-%d")
#For this part of the assignment, you can ignore the missing values in the dataset.
clean.data <- na.omit(data)
#Make a histogram of the total number of steps taken each day
steps_day <- aggregate(steps ~ date, data=clean.data, FUN=sum)
hist(steps_day$steps, labels = TRUE, col="gray", main="Histogram of Steps per day", xlab="Steps")
hist(steps_day$steps, labels = TRUE, col="gray", main="Histogram of Steps per day", xlab="Steps")
#Calculate and report the mean and median total number of steps taken per day
mean(steps_day$steps)
median(steps_day$steps)
data <- read.csv("activity.csv")
#transform
data$date <- as.Date(data$date, "%Y-%m-%d")
#For this part of the assignment, you can ignore the missing values in the dataset.
clean.data <- na.omit(data)
steps_interval <- aggregate(steps ~ interval, data=clean.data, FUN=mean)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"),
xy.labels, xy.lines, panel = lines)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"),xy.labels, xy.lines, panel = lines)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"),xy.labels, xy.lines,)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"))
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"), xy.lines=true)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"), xy.lines)
plot(steps_interval$interval, steps_interval$steps, plot.type = c("multiple", "single"))
plot(steps_interval$interval, steps_interval$steps, plot.type ="single")
plot(steps_interval)
warnings()
clear
clean plot
plot(steps_interval)
?plot
lines(steps_interval)
?lines
lines(steps_interval$interval, steps_interval$steps)
?plot.ts
ts(steps_interval)
plot(ts(steps_interval))
plot(ts(steps_interval)$steps)
ts(steps_interval)
plot(ts(steps_interval$steps)
plot(steps_interval$steps)
?plot
plot(steps_interval$steps, xlab="interval", ylab="steps", type="l")
steps_interval
plot(steps_interval$interval, steps_interval$steps, xlab="interval", ylab="steps", type="l")
?max
steps_interval$interval[max(steps_interval$steps)]
steps_interval$interval[which.max(steps_interval$steps)]
?which.max
?max
which.max(steps_interval$steps)
max(steps_interval$steps)
?max.index
?na.omit
clear
clean
length(is.na(data))
?which
length(is.na(data) = true)
length(is.na(data) == true)
?na.omit
steps_mean <- mean(na.omit(df$steps))
steps_mean <- mean(na.omit(data$steps))
mean(clean.data)
mean(clean.data$steps)
median(clean.data$steps)
